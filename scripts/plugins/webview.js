import fs from 'fs-extra';
import glob from 'glob';
import path from 'path';
import { getEnabledPlugins, sanitizePath } from './shared.js';

function getWebviewFiles(pluginName) {
    const pluginFolder = sanitizePath(path.join(process.cwd(), 'src/core/plugins', pluginName));

    return fs.existsSync(sanitizePath(path.join(pluginFolder, 'webview')));
}

function writeWebViewPlugins(plugins) {
    const vueFiles = {};

    for (const pluginName of plugins) {
        const pluginPath = sanitizePath(path.join(process.cwd(), 'src/core/plugins', pluginName));

        const files = glob.sync(sanitizePath(path.join(pluginPath, 'webview/*.vue')));

        for (const file of files) {
            const componentName = path.basename(file, '.vue');
            vueFiles[componentName] = `../../../src/core/plugins/${pluginName}/webview/${componentName}.vue`;
        }
    }

    const importsHeader = `// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY CONTENTS\n\n`;
    let content = '//@ts-nocheck\n' + importsHeader + "import { shallowRef } from 'vue'\n\n";

    content =
        content +
        Object.keys(vueFiles)
            .map((componentName) => {
                return `import ${componentName} from '${vueFiles[componentName]}';`;
            })
            .join('\n');

    content =
        content +
        '\n\nexport const PLUGIN_IMPORTS = {\n' +
        Object.keys(vueFiles)
            .map((componentName) => {
                return `    ${componentName}: shallowRef(${componentName}),`;
            })
            .join('\n') +
        '\n};\n';

    const importPath = sanitizePath(path.join(process.cwd(), 'src-webviews/src/plugins/imports.ts'));
    fs.outputFileSync(importPath, content);

    return Object.keys(vueFiles).length;
}

function writeVuePlugins(plugins) {
    const vueFiles = {};

    for (const pluginName of plugins) {
        const pluginPath = sanitizePath(path.join(process.cwd(), 'src/core/plugins', pluginName));

        const files = glob.sync(sanitizePath(path.join(pluginPath, 'webview/plugins/*.ts')));

        for (const file of files) {
            const componentName = path.basename(file, '.ts');
            vueFiles[componentName] = `../../../src/core/plugins/${pluginName}/webview/plugins/${componentName}.ts`;
        }
    }

    const importsHeader = `// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY CONTENTS\n\n`;
    let content = '//@ts-nocheck\n' + importsHeader;

    content =
        content +
        Object.keys(vueFiles)
            .map((componentName) => {
                return `import ${componentName} from '${vueFiles[componentName]}';`;
            })
            .join('\n');

    content =
        content +
        '\n\nexport const VUE_PLUGIN_IMPORTS = [\n' +
        Object.keys(vueFiles)
            .map((componentName) => {
                return `    ${componentName},`;
            })
            .join('\n') +
        '\n];\n';

    const importPath = sanitizePath(path.join(process.cwd(), 'src-webviews/src/plugins/vue-plugin-imports.ts'));
    fs.outputFileSync(importPath, content);

    return Object.keys(vueFiles).length;
}

function run() {
    const enabledPlugins = getEnabledPlugins();

    const webviewImports = [];

    for (const pluginName of enabledPlugins) {
        const result = getWebviewFiles(pluginName);

        if (result) {
            webviewImports.push(pluginName);
        }
    }

    writeWebViewPlugins(webviewImports);
    writeVuePlugins(webviewImports);
}

run();
