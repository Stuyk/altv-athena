import * as fs from 'fs';
import glob from 'glob';
import path from 'path';

const CONFIG = path.join(process.cwd(), 'AthenaConfig.json').replace(/\\/gm, '/');

const PLUGINS = path.join(process.cwd(), 'src/core/plugins/').replace(/\\/gm, '/');
const PLUGINS_DIRECTORY = path.join(PLUGINS, '**/').replace(/\\/gm, '/');

const ATHENA_CLIENT_IMPORT = path.join(PLUGINS, 'athena/client/imports.ts').replace(/\\/gm, '/');
const ATHENA_SERVER_IMPORT = path.join(PLUGINS, 'athena/server/imports.ts').replace(/\\/gm, '/');
const ATHENA_WEBVIEW_IMPORT = path.join(PLUGINS, 'athena/webview/imports.ts').replace(/\\/gm, '/');

let foldersToImport = [];

async function readPluginConfig() {
    let data;

    try {
        data = JSON.parse(fs.readFileSync(CONFIG, 'utf8'));
    } catch (err) {
        console.log(`=== ERROR ===`);
        console.log(`COULD NOT PARSE AthenaConfig.json`);
        console.log(`Verify the contents of AthenaConfig.json are formatted correctly.`);
        console.log(`Run it through a JSON validator like https://jsonlint.com/`);
        process.exit(1);
    }

    if (!data.hasOwnProperty('PLUGINS_TO_LOAD')) {
        foldersToImport = [];
        return;
    }

    foldersToImport = data.PLUGINS_TO_LOAD;
}

async function filterFiles(files) {
    if (foldersToImport.length === 0) {
        return files.filter((file) => {
            if (typeof file === 'string') {
                if (file.includes('/athena/')) {
                    return false;
                }
            }

            if (typeof file === 'object') {
                if (file.relativePath.includes('/athena/')) {
                    return false;
                }
            }

            return true;
        })
    }

    return files.filter((file) => {
        if (typeof file === 'string') {
            if (file.includes('/athena/')) {
                return false;
            }
        }

        if (typeof file === 'object') {
            if (file.relativePath.includes('/athena/')) {
                return false;
            }
        }

        for (let i = 0; i < foldersToImport.length; i++) {
            if (typeof file === 'string') {
                if (file.includes(foldersToImport[i])) {
                    return true;
                }
            }

            if (typeof file === 'object') {
                if (file.relativePath.includes(foldersToImport[i])) {
                    return true;
                }
            }
        }
    });
}


async function writeClientPlugins() {
    const clientFolders = await new Promise((resolve) => {
        glob(PLUGINS_DIRECTORY + '/client/index.ts', (err, files) => {
            if (err) {
                resolve([])
                return;
            }

            for (let i = 0; i < files.length; i++) {
                files[i] = files[i].replace(/\\/gm, '/').replace(PLUGINS, '../../').replace('.ts', '');
            }

            resolve(filterFiles(files));
        });
    });

    if (fs.existsSync(ATHENA_CLIENT_IMPORT)) {
        fs.rmSync(ATHENA_CLIENT_IMPORT, { force: true });
    }

    // Write to Client Imports -- Start
    fs.appendFileSync(ATHENA_CLIENT_IMPORT, `// THIS FILE IS AUTOMATICALLY GENERATED. USE 'AthenaConfig.json' TO ADD PLUGINS\n\n`);

    for (let i = 0; i < clientFolders.length; i++) {
        fs.appendFileSync(ATHENA_CLIENT_IMPORT, `import '${clientFolders[i]}';\n`);
    }

    fs.appendFileSync(ATHENA_CLIENT_IMPORT, `\n// THIS FILE IS AUTOMATICALLY GENERATED. USE 'AthenaConfig.json' TO ADD PLUGINS\n`);
    // Write to Client Imports -- End

    console.log(`${clientFolders.length} client plugins added to ${ATHENA_CLIENT_IMPORT}`);
}

async function writeServerPlugins() {
    const serverFolders = await new Promise((resolve) => {
        glob(PLUGINS_DIRECTORY + '/server/index.ts', (err, files) => {
            if (err) {
                resolve([])
                return;
            }

            for (let i = 0; i < files.length; i++) {
                files[i] = files[i].replace(/\\/gm, '/').replace(PLUGINS, '../../').replace('.ts', '');
            }

            resolve(filterFiles(files));
        });
    })

    if (fs.existsSync(ATHENA_SERVER_IMPORT)) {
        fs.rmSync(ATHENA_SERVER_IMPORT, { force: true });
    }

    // Write to Server Imports -- Start
    fs.appendFileSync(ATHENA_SERVER_IMPORT, `// THIS FILE IS AUTOMATICALLY GENERATED. USE 'AthenaConfig.json' TO ADD PLUGINS\n\n`);
    fs.appendFileSync(ATHENA_SERVER_IMPORT, `import { PluginSystem } from '../../../server/systems/plugins';\n\n`)

    for (let i = 0; i < serverFolders.length; i++) {
        fs.appendFileSync(ATHENA_SERVER_IMPORT, `import '${serverFolders[i]}';\n`);
    }

    fs.appendFileSync(ATHENA_SERVER_IMPORT, `\nPluginSystem.init();\n`);
    fs.appendFileSync(ATHENA_SERVER_IMPORT, `\n// THIS FILE IS AUTOMATICALLY GENERATED. USE 'AthenaConfig.json' TO ADD PLUGINS\n`);
    // Write to Server Imports -- End

    console.log(`${serverFolders.length} server plugins added to ${ATHENA_SERVER_IMPORT}`);
}

async function writeWebviewPlugins() {
    const webviewFolders = await new Promise((resolve) => {
        glob(PLUGINS_DIRECTORY + '/webview/*.vue', (err, files) => {
            if (err) {
                resolve([])
                return;
            }

            for (let i = 0; i < files.length; i++) {
                const pathing = files[i].replace(/\\/gm, '/').split('/')
                const fileName = pathing[pathing.length - 1].replace('.vue', '');
                const relativePath = pathing.join('/').replace(/\\/gm, '/').replace(PLUGINS, '../../')
                const fileInfo = {
                    shadowRefName: fileName,
                    relativePath
                }

                files[i] = fileInfo;
            }

            resolve(filterFiles(files));
        });
    })

    if (fs.existsSync(ATHENA_WEBVIEW_IMPORT)) {
        fs.rmSync(ATHENA_WEBVIEW_IMPORT, { force: true });
    }

    // Write to WebView Imports -- Start
    fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `// @ts-nocheck\n`);
    fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `// THIS FILE IS AUTOMATICALLY GENERATED. USE 'AthenaConfig.json' TO ADD PLUGINS\n\n`);
    fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `import { shallowRef } from 'vue';\n`)

    for (let i = 0; i < webviewFolders.length; i++) {
        fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `import ${webviewFolders[i].shadowRefName} from '${webviewFolders[i].relativePath}';\n`);
    }

    fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `\n`);
    fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `export const PLUGIN_IMPORTS = {\n`);
    for (let i = 0; i < webviewFolders.length; i++) {
        fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `    ${webviewFolders[i].shadowRefName}: shallowRef(${webviewFolders[i].shadowRefName}),\n`);
    }
    fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `};\n`);
    fs.appendFileSync(ATHENA_WEBVIEW_IMPORT, `\n// THIS FILE IS AUTOMATICALLY GENERATED. USE 'AthenaConfig.json' TO ADD PLUGINS\n`);
    // Write to WebView Imports -- End

    console.log(`${webviewFolders.length} server plugins added to ${ATHENA_WEBVIEW_IMPORT}`);
}

async function readPlugins() {
    await readPluginConfig();
    await writeClientPlugins();
    await writeServerPlugins();
    await writeWebviewPlugins();
}

readPlugins();